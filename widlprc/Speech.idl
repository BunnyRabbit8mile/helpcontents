[NoInterfaceObject] interface SpeechManagerObject {
        readonly attribute SpeechManager speech;
};

Tizen implements SpeechManagerObject;

[NoInterfaceObject] interface SpeechManager {
    void vocalizeString(DOMString speakString);
};

[Constructor()]
interface SpeechRecognition : EventTarget {
    attribute SpeechGrammarList grammars;
    attribute DOMString lang;
    attribute boolean continuous;
    attribute boolean interimResults;
    attribute unsigned long maxAlternatives;
    attribute DOMString serviceURI;
    void start();
    void stop();
    void abort();
    attribute EventHandler onaudiostart;
    attribute EventHandler onsoundstart;
    attribute EventHandler onspeechstart;
    attribute EventHandler onspeechend;
    attribute EventHandler onsoundend;
    attribute EventHandler onaudioend;
    attribute EventHandler onresult;
    attribute EventHandler onnomatch;
    attribute EventHandler onerror;
    attribute EventHandler onstart;
    attribute EventHandler onend;
};

enum ErrorCode {
    "no-speech",
    "aborted",
    "audio-capture",
    "network",
    "not-allowed",
    "service-not-allowed",
    "bad-grammar",
    "language-not-supported"
};

[NoInterfaceObject] interface SpeechRecognitionError : Event {
    readonly attribute ErrorCode error;
    readonly attribute DOMString message;
};

[NoInterfaceObject] interface SpeechRecognitionAlternative {
    readonly attribute DOMString transcript;
    readonly attribute float confidence;
};

[NoInterfaceObject] interface SpeechRecognitionResult {
    readonly attribute unsigned long length;
    SpeechRecognitionAlternative item(unsigned long index);
    readonly attribute boolean final;
};

[NoInterfaceObject] interface SpeechRecognitionResultList {
    readonly attribute unsigned long length;
    SpeechRecognitionResult item(unsigned long index);
};

[NoInterfaceObject] interface SpeechRecognitionEvent : Event {
    readonly attribute unsigned long resultIndex;
    readonly attribute SpeechRecognitionResultList results;
    readonly attribute any interpretation;
    readonly attribute Document emma;
};

[Constructor()]
interface SpeechGrammar {
    attribute DOMString src;
    attribute float weight;
};

[Constructor()]
interface SpeechGrammarList {
    readonly attribute unsigned long length;
    SpeechGrammar item(unsigned long index);
    void addFromURI(DOMString src, optional float weight);
    void addFromString(DOMString string, optional float weight);
};


interface SpeechSynthesis {
    readonly attribute boolean pending;
    readonly attribute boolean speaking;
    readonly attribute boolean paused;

    void speak(SpeechSynthesisUtterance utterance);
    void cancel();
    void pause();
    void resume();
    SpeechSynthesisVoiceList getVoices();
};

[NoInterfaceObject]
interface SpeechSynthesisGetter
{
    readonly attribute SpeechSynthesis speechSynthesis;
};

Window implements SpeechSynthesisGetter;

[Constructor, Constructor(DOMString text)]
interface SpeechSynthesisUtterance : EventTarget {
    attribute DOMString text;
    attribute DOMString lang;
    attribute DOMString voiceURI;
    attribute float volume;
    attribute float rate;
    attribute float pitch;

    attribute EventHandler onstart;
    attribute EventHandler onend;
    attribute EventHandler onerror;
    attribute EventHandler onpause;
    attribute EventHandler onresume;
    attribute EventHandler onmark;
    attribute EventHandler onboundary;
};

interface SpeechSynthesisEvent : Event {
    readonly attribute unsigned long charIndex;
    readonly attribute float elapsedTime;
    readonly attribute DOMString name;
};

interface SpeechSynthesisVoice {
    readonly attribute DOMString voiceURI;
    readonly attribute DOMString name;
    readonly attribute DOMString lang;
    readonly attribute boolean localService;
    readonly attribute boolean default;
};

interface SpeechSynthesisVoiceList {
    readonly attribute unsigned long length;
    SpeechSynthesisVoice item(unsigned long index);
};
